*/ Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
*/

//Time complexity - O(n^2)
//space Complexity- O(m*n)

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();

        vector<vector<int>>t(m+1, vector<int>(n+1));
        //first row zero ho jayega
        for(int i = 0; i <= m; i++){
            t[i][0] = 0;
        }
        for(int j = 0; j <= n; j++){
            t[0][j] = 0;
        }


        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(text1[i-1] == text2[j-1]){
                    t[i][j] = 1+t[i-1][j-1];
                }else{
                    t[i][j] = max(t[i-1][j], t[i][j-1]);
                }
            }
        }

        string ans = "";

        int i = m+1, j = n+1;

        while(i > 0 && j > 0){
            if(text1[i-1] == text2[j-1]){
                ans.push_back(text1[i-1]);
                i--; j--;
            }
            else{
                if(t[i-1][j] > t[i][j-1]) i--;
                else j--;
            }
        }
        reverse(ans.begin(), ans.end());
        cout<<ans<<endl;
        return t[m][n];
    }
};
