//Ques - 1312. Minimum Insertion Steps to Make a String Palindrome

//Approach 1 - Recursion + memoization
class Solution {
public:
    int t[501][501];

    int solve(int i, int j, string &s){
        if(i >= j) return 0;

        if(t[i][j] != -1) return t[i][j];

        if(s[i] == s[j]) {
            return t[i][j] = solve(i+1, j-1, s);
        }

        return t[i][j] = 1+min(solve(i+1, j, s), solve(i, j-1, s));

    }

    int minInsertions(string s) {
        int n = s.size();
        memset(t, -1, sizeof(t));
        return solve(0, n-1, s);
    }
};

-----------------------------------------------------------------------------------------------------------------------------
//Approach - 2
//Bottom up Approach

class Solution {
public:

    int minInsertions(string s) {
        int n = s.size();
        vector<vector<int>>t(n, vector<int>(n));

        for(int i = 0; i < n; i++){
            t[i][i] = 0;
        }

        for(int len = 2; len <= n; len++){
            for(int i = 0; i+len-1 < n; i++){
                int j = i+len-1;

                if(s[i] == s[j]) 
                t[i][j] = t[i+1][j-1];

                else {
                    t[i][j] = 1+min(t[i+1][j], t[i][j-1]);
                }

            }
        }

        return t[0][n-1];
    }
};


