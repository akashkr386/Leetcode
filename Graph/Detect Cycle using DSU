// GFG - Detect Cycle using DSU

class Solution {
  public:
  
    vector<int>parent;
    vector<int>rank;
    
    int find(int i){
        if(i == parent[i]) return i;
        return parent[i] = find(parent[i]);
    }
    
    void findUnion(int x, int y){
        int x_parent = find(x);
        int y_parent = find(y);
        
        if(rank[x_parent] > rank[y_parent]){
            parent[y_parent] = x_parent;
        }
        else if(rank[x_parent] < rank[y_parent]){
            parent[x_parent] = y_parent;
        }
        else{
            parent[y_parent] = x_parent;
            rank[x_parent]++;
        }
        
    }
    
    int detectCycle(int V, vector<int> adj[]) {
        
        parent.resize(V);
        rank.resize(V, 0);
        
        for(int i = 0; i < V; i++){
            parent[i] = i;
        }
        
        
        for(int u = 0; u < V; u++){
            for(int &v : adj[u]){
                if(u < v){
                    if(find(u) == find(v)) 
                        return 1;
                    else
                        findUnion(u, v);
                }
                
            }
        }
        
        return 0;
    }
};
