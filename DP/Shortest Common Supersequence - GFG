// GFG question - Shortest Common Supersequence


//Approach - 1
//recursion + memoization

class Solution {
  public:
    // Function to find length of shortest common supersequence of two strings.
    int m, n;
    int t[501][501];
    
    int solve(int idx1, int idx2, string &s1, string &s2){
        if(idx1 >= m || idx2 >= n){
            if(idx1 < m){
                return m-(idx1);    
            }
                return n-(idx2);
            
        }
        if(t[idx1][idx2] != -1){
            return t[idx1][idx2];
        }
        
        if(s1[idx1] == s2[idx2]){
            return t[idx1][idx2] = 1+solve(idx1+1, idx2+1, s1, s2);     
        }
        
        return t[idx1][idx2] = 1+min(solve(idx1+1, idx2, s1, s2), solve(idx1, idx2+1, s1, s2));
        
    }
    
    
    int shortestCommonSupersequence(string &s1, string &s2) {
        m = s1.size();
        n = s2.size();
        memset(t, -1, sizeof(t));
        
        return solve(0, 0, s1, s2);
    }
};

----------------------------------------------------------------------------------------------------------------------------
//Approach - 2
//Bottom up approach
class Solution {
  public:
    // Function to find length of shortest common supersequence of two strings.
    int shortestCommonSupersequence(string &s1, string &s2) {
        int m = s1.size();
        int n = s2.size();
        
        vector<vector<int>>t(m+1, vector<int>(n+1));
        
        
        
        for(int i = 0; i <= m; i++){
            for(int j = 0; j <= n; j++){
                if(i == 0 || j == 0) 
                    t[i][j] = i+j;
                else if(s1[i-1] == s2[j-1]){
                    t[i][j] = 1+t[i-1][j-1];
                }else{
                    t[i][j] = 1+min(t[i-1][j], t[i][j-1]);
                }
            }
        }
        return t[m][n];
    }
};

------------------------------------------------------------------------------------------------------------------------------
//approach - 3
//using longest common subsequence method

int shortestCommonSupersequence(string &s1, string &s2) {
        int m = s1.size();
        int n = s2.size();
        
        vector<vector<int>>t(m+1, vector<int>(n+1));
        
        for(int row = 0; row <= m; row++){
            t[row][0] = 0;
        }
        for(int col = 0; col <= n; col++){
            t[0][col] = 0;
        }
        
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(s1[i-1] == s2[j-1]){
                    t[i][j] = 1+t[i-1][j-1];
                }else{
                    t[i][j] = max(t[i-1][j], t[i][j-1]);
                }
            }
        }
        int ans = t[m][n];
        
        return m+n-ans;
    }
