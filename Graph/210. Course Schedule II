// Ques - 210. Course Schedule II

//Approach 1 - using BFS + kahn's algorithm

class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int>ans;

        vector<vector<int>>adj(numCourses);
        vector<int>inDeg(numCourses, 0);
        int count = 0;

        for(int i = 0; i < prerequisites.size(); i++){
            int u = prerequisites[i][0];
            int v = prerequisites[i][1];
            adj[v].push_back(u);
            inDeg[u]++;
        }

        queue<int>q;

        for(int i = 0; i < numCourses; i++){
            if(inDeg[i] == 0){
                ans.push_back(i);
                q.push(i);
                count++;
            }
        }

        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(int &v : adj[node]){
                inDeg[v]--;
                if(inDeg[v] == 0){
                    ans.push_back(v);
                    q.push(v);
                    count++;
                }
            }
        }
        vector<int>ans2;
        return count == numCourses ? ans : ans2;
    }
};
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Approach - 2 
// Using DFS + kahn's algo

class Solution {
public:
    
    bool checkCycleDFS(vector<vector<int>>&adj, int u, vector<bool>&vis, vector<bool>&inRecursion){
        vis[u] = true;
        inRecursion[u] = true;

        for(int &v : adj[u]){
            if(!vis[v] && checkCycleDFS(adj, v, vis, inRecursion)){
                return true;
            }
            else if(inRecursion[v]){
                return true;
            }
        }

        inRecursion[u] = false;
        return false;
    }

    void DFS(vector<vector<int>>&adj, int u, vector<bool>&vis, stack<int>&st){
        vis[u] = true;

        for(int &v : adj[u]){
            if(!vis[v]){
                DFS(adj, v, vis, st);
            }
        }

        st.push(u);
        return;
    }


    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>>adj(numCourses);
        int V = numCourses;
        int count = 0;

        for(int i = 0; i < prerequisites.size(); i++){
            int u = prerequisites[i][0];
            int v = prerequisites[i][1];
            adj[v].push_back(u);
        }

        vector<bool>vis(V, 0);
        vector<bool>inRecursion(V, 0);
        //Check karo cycle present hai ya nahi
        for(int i = 0; i < V; i++){
            if(!vis[i] && checkCycleDFS(adj, i, vis, inRecursion)){
                return {};
            }
        }

        vis.assign(V, 0);

        stack<int>st;

        for(int i = 0; i < V; i++){
            if(!vis[i]){
                DFS(adj, i, vis, st);
            }
        }

        vector<int>ans;

        while(!st.empty()){
            ans.push_back(st.top());
            st.pop();
        }

        return ans;
    }
};



