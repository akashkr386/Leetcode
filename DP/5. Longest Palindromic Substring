//Ques 5. Longest Palindromic Substring

//Approach - 1
//TC- O(n^3)

class Solution {
public:
    bool isPalindrom(string &s, int i, int j){
        if(i > j) return true;
        if(s[i] == s[j]){
            return isPalindrom(s, i+1, j-1);
        }
        return false;
    }

    string longestPalindrome(string s) {
        int n = s.size();
        string ans = "";
        int a = 0, b = 0;

        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(isPalindrom(s, i, j)){
                    if(j-i > b-a){
                        a = i;
                        b = j;
                    }
                }
            }
        }

        while(a <= b){
            ans += s[a];
            a++;
        }

        return ans;
    }
};

------------------------------------------------------------------------------------------------------------------------------
//Approach - 2
//recursion + memoization

class Solution {
public:
    int t[1001][1001];

    bool isPalindrom(string &s, int i, int j){
        if(i > j) return true;

        if(t[i][j] != -1) return t[i][j];

        if(s[i] == s[j]){
            return t[i][j] = isPalindrom(s, i+1, j-1);
        }
        return t[i][j] = false;
    }

    string longestPalindrome(string s) {
        int n = s.size();
        string ans = "";
        int a = 0, b = 0;

        memset(t, -1, sizeof(t));

        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(isPalindrom(s, i, j)){
                    if(j-i > b-a){
                        a = i;
                        b = j;
                    }
                }
            }
        }

        while(a <= b){
            ans += s[a];
            a++;
        }

        return ans;
    }
};

----------------------------------------------------------------------------------------------------------------------------
//Approach 3 
//Bottom up approach

class Solution {
public:

    string longestPalindrome(string s) {
        int n = s.size();
        string ans = "";

        vector<vector<bool>> t(n, vector<bool>(n, false));
        int maxL = 0;
        int start = 0;

        for (int len = 1; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (i == j) {
                    t[i][j] = true;
                } else if (i + 1 == j) {
                    t[i][j] = (s[i] == s[j]);
                } else {
                    t[i][j] = (s[i] == s[j] && t[i + 1][j - 1]);
                }
                if (t[i][j] && j - i+1 > maxL) {
                    start = i;
                    maxL = j - i+1;
                }
            }
        }

        return s.substr(start, maxL);
    }
};
