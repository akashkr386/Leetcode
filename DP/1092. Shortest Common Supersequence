//ques - 1092. Shortest Common Supersequence 

//approach 1 - recursion(MLE)

class Solution {
public:
    int m, n;

    string solve(int i, int j, string &s1, string &s2){
        if(i == m){
            return s2.substr(j);
        }
        if(j == n)
            return s1.substr(i);


        if(s1[i] == s2[j]){
            return string(1, s1[i])+solve(i+1, j+1, s1, s2);
        }

        string skip1 = string (1, s1[i]) +solve(i+1, j, s1, s2);
        string skip2 = string(1, s2[j]) +solve(i, j+1, s1, s2);
        return (skip1.size() <= skip2.size()) ? skip1 : skip2;
    }

    string shortestCommonSupersequence(string str1, string str2) {
        m = str1.size();
        n = str2.size();

        string ans = solve(0, 0, str1, str2);
 
        return ans;
    }
};

---------------------------------------------------------------------------------------------------------------------------
// approach 2 (MLE)
//Recursion + memoization

class Solution {
public:
    int m, n;

    string t[1001][1001];

    string solve(int i, int j, string& s1, string& s2) {
        if (i == m) {
            return s2.substr(j);
        }
        if (j == n)
            return s1.substr(i);

        if (t[i][j] != "") {
            return t[i][j];
        }

        if (s1[i] == s2[j]) {
            return t[i][j] = string(1, s1[i]) + solve(i + 1, j + 1, s1, s2);
        }

        string skip1 = string(1, s1[i]) + solve(i + 1, j, s1, s2);
        string skip2 = string(1, s2[j]) + solve(i, j + 1, s1, s2);
        return t[i][j] = (skip1.size() <= skip2.size()) ? skip1 : skip2;
    }

    string shortestCommonSupersequence(string str1, string str2) {
        m = str1.size();
        n = str2.size();

        for (int i = 0; i < 1001; i++) {
            for (int j = 0; j < 1001; j++) {
                t[i][j] = "";
            }
        }

        string ans = solve(0, 0, str1, str2);

        return ans;
    }
};

-----------------------------------------------------------------------------------------------------------------------------

//Approach-3
//bottom up approach

class Solution {
public:
    string shortestCommonSupersequence(string s1, string s2) {
        int m = s1.size();
        int n = s2.size();

        vector<vector<int>> t(m + 1, vector<int>(n + 1));

        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (i == 0 || j == 0) {
                    t[i][j] = i + j;
                } else if (s1[i - 1] == s2[j - 1]) {
                    t[i][j] = 1 + t[i - 1][j - 1];
                } else {
                    t[i][j] = 1 + min(t[i - 1][j], t[i][j - 1]);
                }
            }
        }

        string ans = "";
        int i = m, j = n;

        while (i > 0 && j > 0) {
            if (s1[i - 1] == s2[j - 1]) {
                ans += s1[i - 1];
                i--;
                j--;
            } else {
                if (t[i - 1][j] < t[i][j - 1]) {
                    ans += s1[i - 1];
                    i--;
                } else {
                    ans += s2[j - 1];
                    j--;
                }
            }
        }
        while(i > 0){
            ans += s1[i-1];
            i--;
        }
        while(j > 0){
            ans += s2[j-1];
            j--;
        }

        reverse(ans.begin(), ans.end());
        return ans;
    }
};


