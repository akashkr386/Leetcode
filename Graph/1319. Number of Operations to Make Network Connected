// Ques - 1319. Number of Operations to Make Network Connected 
// In this question we use DSU 

// Approach - 1

class Solution {
public:

    vector<int>parent;
    vector<int>rank;

    int find(int x){
        if(x == parent[x]) return x;

        return parent[x] = find(parent[x]);
    }

    void Union(int x, int y){
        int x_parent = find(x);
        int y_parent = find(y);

        if(rank[x_parent] > rank[y_parent]){
            parent[y_parent] = x_parent;
        }
        else if(rank[x_parent] < rank[y_parent]){
            parent[x_parent] = y_parent;
        }
        else{
            rank[x_parent]++;
            parent[y_parent] = x_parent;
        }
    }


    int makeConnected(int n, vector<vector<int>>& connections) {

        if(connections.size() < n-1) return -1;

        parent.resize(n);
        rank.resize(n, 0);

        for(int i = 0; i < n; i++){
            parent[i] = i;
        }

        int component = n;
         
        for(int i = 0; i < connections.size(); i++){
            int u = connections[i][0];
            int v = connections[i][1];
            if(find(u) == find(v)) continue;

            Union(u, v);
            component--;
        }

        return component-1;
    }
};

------------------------------------------------------------------------------------------------------------------------------
// Approach - 2
//Using DFS

class Solution {
public:
    void markVisited(int u, vector<vector<int>>&adj, vector<bool>&vis){
        vis[u] = true;

        for(int &v : adj[u]){
            if(!vis[v]){
                markVisited(v, adj, vis);
            }
        }

    }


    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n-1) return -1;

        vector<bool>vis(n, 0);

        vector<vector<int>>adj(n);

        for(int i = 0; i < connections.size(); i++){
            int u = connections[i][0];
            int v = connections[i][1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        int ans = 0;
        for(int i = 0; i < n; i++){
            if(!vis[i]){
                ans++;
                markVisited(i, adj, vis);
            }
        }

        return ans-1;
    }
};

--------------------------------------------------------------------------------------------------------------------------
// Approach - 3
//using BFS



